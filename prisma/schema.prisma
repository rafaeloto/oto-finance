generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id             String   @id @default(uuid())
  name           String
  bank           Bank
  initialBalance Decimal  @default(0) @db.Decimal(10, 2)
  balance        Decimal  @db.Decimal(10, 2)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String

  transactions     Transaction[] @relation("AccountTransaction")
  fromTransactions Transaction[] @relation("AccountFromTransaction")
  toTransactions   Transaction[] @relation("AccountToTransaction")
  invoicesPaidFor  Invoice[]     @relation("PaidByAccount")
}

model CreditCard {
  id          String         @id @default(uuid())
  name        String
  limit       Decimal        @db.Decimal(10, 2)
  closingDate Int
  dueDate     Int
  flag        CreditCardFlag
  color       String         @default("from-gray-700 via-gray-800 to-gray-900")
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  userId      String

  invoices     Invoice[]     @relation("CreditCardInvoices")
  transactions Transaction[] @relation("CreditCardTransactions")
}

model Invoice {
  id              String        @id @default(uuid())
  month           Int
  year            Int
  closingDate     Int
  dueDate         Int
  status          InvoiceStatus
  totalAmount     Decimal       @default(0) @db.Decimal(10, 2)
  paymentAmount   Decimal?      @db.Decimal(10, 2)
  paymentDate     DateTime?
  paidByAccountId String?
  creditCardId    String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  userId          String

  creditCard    CreditCard    @relation("CreditCardInvoices", fields: [creditCardId], references: [id])
  transactions  Transaction[] @relation("InvoiceTransactions")
  paidByAccount Account?      @relation("PaidByAccount", fields: [paidByAccountId], references: [id])
}

model Category {
  id        String          @id @default(uuid())
  name      String
  icon      String?
  color     String?
  type      TransactionType
  userId    String? // null = global category (default); not null = user created category
  parentId  String?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  parent        Category?  @relation("Subcategories", fields: [parentId], references: [id])
  subcategories Category[] @relation("Subcategories")

  transactions Transaction[]
}

model Transaction {
  id            String                   @id @default(uuid())
  name          String
  type          TransactionType
  amount        Decimal                  @db.Decimal(10, 2)
  paymentMethod TransactionPaymentMethod
  date          DateTime
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
  userId        String

  accountId         String?
  fromAccountId     String?
  toAccountId       String?
  cardId            String?
  invoiceId         String?
  installmentId     String?
  installmentNumber Int?
  installmentsTotal Int?
  categoryId        String?

  category    Category?   @relation(fields: [categoryId], references: [id])
  account     Account?    @relation("AccountTransaction", fields: [accountId], references: [id])
  fromAccount Account?    @relation("AccountFromTransaction", fields: [fromAccountId], references: [id])
  toAccount   Account?    @relation("AccountToTransaction", fields: [toAccountId], references: [id])
  creditCard  CreditCard? @relation("CreditCardTransactions", fields: [cardId], references: [id])
  invoice     Invoice?    @relation("InvoiceTransactions", fields: [invoiceId], references: [id])
}

enum Bank {
  PAY_99
  BANCO_DO_BRASIL
  BRADESCO
  CAIXA_ECONOMICA
  INTER
  ITAU
  MERCADO_PAGO
  NEON
  NUBANK
  PICPAY
  SANTANDER
  OTHER
  C6
  XP
}

enum CreditCardFlag {
  ALELO
  AMEX
  DINERS
  ELO
  HIPERCARD
  MASTERCARD
  VISA
}

enum InvoiceStatus {
  OPEN
  CLOSED
  PAID
}

enum TransactionType {
  GAIN
  EXPENSE
  TRANSFER
  INVESTMENT
}

enum TransactionPaymentMethod {
  CREDIT
  DEBIT
}
